\-------------------------------------------------------------------------
\ S3 Progressive Ratio with Variable Session Length
\ Version: 1
\ Created by Shaun Khoo (4 June 2019)
\ >('.')<
\ http://orcid.org/0000-0002-0972-3788
\ License: MIT
\-------------------------------------------------------------------------

\CONTROL CONSTANTS
^BreakPointTime = 60	\Breakpoint recorded after x minutes with no reward
^MaxSession = 300	\Maximum session length in minutes
^CueLength = 5		\Cue length in seconds
^Timeout = 25		\Timeout until next reinforcer available, includes cue
^PumpTime = 5		\Pump time in seconds for fluid reinforcers
^MaximumRewards = 0	\Maximum rewards, set to 0 for no maximum
^TimebinSize = 1	\Timebin size in minutes
^ActiveLever = 1	\Active lever, set to 1 for left, 10 for right
^RewardIdentity = 1	\1 = reward delivered by fluid pump
			\2 = reward delivered pellet dispenser
^Version = 100		\Program version number

\INPUTS
^LeftLever = 1
^RightLever = 3
^Magazine = 4
^ActivityOne = 5
^ActivityTwo = 6
^ActivityThree = 7
^ActivityFour = 8

\OUTPUTS
^LeftOut = 1
^RightOut = 10
^Pellet = 3
^LeftLight = 4
^RightLight = 5
^Tone = 6
^Houselight = 7
^Pump = 8
^Fan = 9
	
\Z-PULSES
^Reward = 1
^EndTimeout = 2
^Shutdown = 3

\VARIABLES
\VARIABLES - DATA - Session Totals
DIM A = 27
\Session Length (s) = A(0)
\Breakpoint = A(1)
\Active Lever Presses = A(2)
\Inactive Lever Presses = A(3)
\Rewards = A(4)
\Magazine Entries = A(5)
\Total Activity = A(6)
\Timeout Active Lever = A(7)
\Timeout Inactive Lever = A(8)
\Timeout Magazine Entries = A(9)
\Timeout Total Activity = A(10)
\Active Lever Latency = A(11)
\Inactive Lever Latency = A(12)
\Reward Latency = A(13)
\Magazine Entry Latency = A(14)
\ActivityOne Total = A(15)
\ActivityTwo Total = A(16)
\ActivityThree Total = A(17)
\ActivityFour Total = A(18)
\ActivityOne Timeout = A(19)
\ActivityTwo Timeout = A(20)
\ActivityThree Timeout = A(21)
\ActivityFour Timeout = A(22)
\ActivityOne Latency = A(23)
\ActivityTwo Latency = A(24)
\ActivityThree Latency = A(25)
\ActivityFour Latency = A(26)
var_alias Weight = A(27)

\VARIABLES - DATA - Timecourse Arrays
DIM B = 50000	\Active Lever,			subscript S/X(9)
DIM C = 50000	\Inactive Lever			subscript S/X(10)
DIM D = 50000	\Rewards			subscript S/X(11)
DIM E = 50000	\Magazine Entries		subscript S/X(12)
DIM F = 50000	\ActivityOne			subscript S/X(13)
DIM G = 50000	\ActivityTwo			subscript S/X(14)
DIM H = 50000	\ActivityThree			subscript S/X(15)
DIM I = 50000	\ActivityFour			subscript S/X(16)

\VARIABLES - DATA - Timebin Arrays
DIM J = 10000	\Active Lever,			subscript T
DIM K = 10000	\Inactive Lever,		subscript T
DIM L = 10000	\Rewards,			subscript T
DIM M = 10000	\Magazine Entries,		subscript T
DIM N = 10000	\Total Activity,		subscript T
DIM O = 10000	\ActivityOne,			subscript T
DIM P = 10000	\ActivityTwo,			subscript T
DIM Q = 10000	\ActivityThree,			subscript T
DIM R = 10000	\ActivityFour,			subscript T

\VARIABLES - CONTROL - WORKING VARIABLES
DIM X = 16
\X(0) = Session Clock (seconds)
\X(1) = Decisecond Clock
\X(2) = Timebin Clock
\X(3) = Time Since Reward
\X(4) = Re-zeroing response counter
\X(5) = Cue operation time 1 [either cue time, or pump time, or cue and pump time]
\X(6) = Cue operation time 2 [cue time after pump or pump time after cue]
\X(7) = Post cue and pump timeout
\X(8) = Current Ratio
\X(9) = Subscript for B
\X(10) = Subscript for C
\X(11) = Subscript for D
\X(12) = Subscript for E
\X(13) = Subscript for F
\X(14) = Subscript for G
\X(15) = Subscript for H
\X(16) = Subscript for I

\VARIABLES - CONTROL - PROGRESSIVE RATIO LIST,		subscript V
\Function: Round[5e^(reinforcer number * 0.2) - 5]
\Reference: Richardson, N. R., & Roberts, D. C. S. (1996). Progressive ratio schedules in drug self-administration 
\studies in rats: a method to evaluate reinforcing efficacy. Journal of Neuroscience Methods, 66(1), 1-11. 
\doi: 10.1016/0165-0270(95)00153-0
LIST U = 1, 2, 4, 6, 9, 12, 15, 20, 25, 32, 40, 50, 62, 77, 95, 118, 
145, 178, 219, 268, 328, 402, 492, 603, 737, 901, 1102, 1347, 1646, 
2012, 2459, 3004, 3670, 4484, 5478, 6692, 8175, 9986, 12198, 14900, 
18200, 22230, 27153, 33166, 40510, 49481, 60437, 73819, 90164, 110127

\VARIABLES - CONTROL - SESSION PARAMETERS
DIM Z = 11
var_alias Break Point Time (min) = Z(0)
var_alias Maximum Session Length (min) = Z(1)
var_alias Cue Length (s) = Z(2)
var_alias Timeout (s) = Z(3)
var_alias Pump Operation Time (s) = Z(4)
var_alias Maximum Rewards = Z(5)
var_alias Timebin Size (min) = Z(6)
var_alias Active Lever (1L 3R) = Z(7)
var_alias Inactive Lever (1L 3R) = Z(8)
var_alias Cue Light (4L 5R) = Z(9)
var_alias Reward Identity = Z(10)
var_alias Version = Z(11)

DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, U, Z
DISKOPTIONS = FULLHEADERS
DISKFORMAT = 16.3
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Control Program

S.S.1,
S1, 	\State 1 shows the program has loaded.
	0.01": SET Z(11) = ^Version / 100;
	SHOW 1, Program Version, Z(11);

	\Set the variables according to the control constants
	SET Z(0) = ^BreakPointTime, Z(1) = ^MaxSession, Z(2) = ^CueLength;
	SET Z(3) = ^Timeout, Z(4) = ^PumpTime, Z(5) = ^MaximumRewards;
	SET Z(6) = ^TimebinSize, Z(7) = ^ActiveLever;
	SET Z(10) = ^RewardIdentity;

	\Seal all arrays
	SET B(1) = -987.987, C(1) = -987.987, D(1) = -987.987;		\Timestamp recorders
	SET E(1) = -987.987, F(1) = -987.987, G(1) = -987.987;
	SET H(1) = -987.987, I(1) = -987.987;
	SET J(1) = -987.987, K(1) = -987.987, L(1) = -987.987;		\Timebin recorders
	SET M(1) = -987.987, N(1) = -987.987, O(1) = -987.987;
	SET P(1) = -987.987, Q(1) = -987.987, R(1) = -987.987;
	SET A(27) = -987.987;						\Seal the weight element

	\Set the active lever
	IF Z(7) < 2 [@LeftActive, @RightActive]
		@LeftActive: SET Z(7) = ^LeftLever, Z(8) = ^RightLever;
			SET Z(9) = ^LeftLight ---> S2
		@RightActive: SET Z(7) = ^RightLever, Z(8) = ^LeftLever;
			SET Z(9) = ^RightLight ---> S2

S2,	\State 2 waits for the start command
	#START: SHOW 1, Session Time, X(0); ON ^Houselight, ^Fan;

	\Set the program start time
	SET STARTHOURS = CURRENTHOURS;
	SET STARTMINUTES = CURRENTMINUTES, STARTSECONDS = CURRENTSECONDS;

	\Set default latencies
	SET B(0) = Z(1) * 60, C(0) = Z(1) * 60, D(0) = Z(1) * 60;
	SET E(0) = Z(1) * 60, F(0) = Z(1) * 60, G(0) = Z(1) * 60;
	SET H(0) = Z(1) * 60, I(0) = Z(1) * 60 ---> S3

S3,	\State 3 counts the session length in seconds
	1": ADD X(0); IF X(0) + 0.01 >= Z(1) * 60 [@SHUTDOWN, @CONTINUE]
	@SHUTDOWN: Z^Shutdown; SET A(0) = X(0);
	SHOW 1, Session Time, X(0);
	SET A(9) = B(0), A(10) = C(0), A(11) = D(0);		\Transfer latency values to the A array
	SET A(12) = E(0), A(21) = F(0), A(22) = G(0);
	SET A(23) = H(0), A(24) = I(0);
	OFF ^LeftOut, ^RightOut, ^Houselight, ^Fan;
	OFF ^LeftLight, ^RightLight ---> S4
	@CONTINUE: IF X(3) >= Z(0) * 30 [@COUNTDOWN, @CLOCK]
		@COUNTDOWN: SHOW 1, Time Since Reward, X(3) ---> SX
		@CONTINUE: SHOW 1, Session Time, X(0) ---> SX



	#Z^Shutdown: ---> S4

S4,	\State 4 waits for 1 second and closes the program
	1": ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond Timer

S.S.2,
S1,	\State 1 waits for the start command
	#START: IF Z(2) = Z(4) [@EQUAL, @INEQUALITY]
		@EQUAL: SET X(5) = Z(2) * 1", X(6) = -1;
		SET X(7) = (Z(3) - Z(2)) * 1" ---> S2
		@INEQUALITY: IF Z(4) > Z(2) [@LONGERPUMP, @LONGERCUE]
			@LONGERPUMP: SET X(5) = Z(2) * 1", X(6) = (Z(4) - Z(2)) * 1";
			SET X(7) = (Z(3) - Z(4)) * 1" ---> S2
			@LONGERCUE: SET X(5) = Z(4) * 1", X(6) = (Z(2) - Z(4)) * 1";
			SET X(7) = (Z(3) - Z(2)) * 1" ---> S2

S2,	\State 2 counts upwards in 10 ms increments
	0.01": SET X(1) = X(1) + 0.01;
	SET X(2) = X(2) + 0.01; 
	IF (((X(2) + 0.01) / 60) >= Z(6)) AND ((T + 1) < Z(1) / Z(6)) [@TRUE, @FALSE]
		@TRUE: SET X(2) = 0; ADD T;
		SET J(T) = 0, K(T) = 0, L(T) = 0, M(T) = 0;
		SET N(T) = 0, O(T) = 0, P(T) = 0, Q(T) = 0;
		SET R(T) = 0;
		SET J(T+1) = -987.987, K(T+1) = -987.987;
		SET L(T+1) = -987.987, M(T+1) = -987.987;
		SET N(T+1) = -987.987, O(T+1) = -987.987;
		SET P(T+1) = -987.987, Q(T+1) = -987.987;
		SET R(T+1) = -987.987 ---> SX
		@FALSE: ---> SX

	#Z^Shutdown: ---> S3

S3,	\State 3 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 3 - Breakpoint Timer

S.S.3,
S1,	\State 1 waits for the start command
	#START: ---> S2

S2,	\State 2 waits for a reward to be delivered
	1": ADD X(3); IF X(3) + 0.01 >= Z(0) * 60 [@BREAK, @CONTINUE]
		@BREAK: Z^Shutdown; SET A(0) = X(1);
		SET A(11) = B(0), A(12) = C(0), A(13) = D(0);		\Transfer latency values to the A array
		SET A(14) = E(0), A(23) = F(0), A(24) = G(0);
		SET A(25) = H(0), A(26) = I(0);
		OFF ^LeftOut, ^RightOut, ^Houselight, ^Fan;
		OFF ^LeftLight, ^RightLight ---> S4
		@CONTINUE: ---> SX

	#Z^Reward: SET X(3) = 0 ---> S3
	#Z^Shutdown: ---> S4

S3,	\State 3 waits for the end of the timeout
	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Active Lever

S.S.4,
S1,	\State 1 waits for the start command
	#START: SHOW 2, Active Lever, A(2);
	SHOW 4, Rewards, A(4); ON ^LeftOut, ^RightOut;
	LIST X(8) = U(V) ---> S2

S2,	\State 2 counts active lever presses
	#RZ(7): ADD A(2), J(T), X(4); SET S = X(9); SET B(S) = X(1);
	ADD X(9); SET S = X(9); SET B(S) = -987.987;
	SHOW 2, Active Lever, A(2);

	\IF the counter has reached the current ratio and that ratio is greater than 0
	\i.e. is not extinction, and either the maximum number of rewards has not been
	\reached OR there is no maximum number of rewards, THEN deliver the reward.
	IF ((X(4) + 0.01 > X(8)) AND (X(8) > 0)) AND ((A(4) < Z(5)) OR (Z(5) <= 0)) [@REWARD, @NULL]
		@REWARD: Z^Reward; ADD A(4), L(T);
		SET S = X(11); SET D(S) = X(1); ADD X(11);
		SET S = X(11); SET D(S) = -987.987;
		SHOW 4, Rewards, A(4);
		SET X(4) = 0, A(1) = X(8); LIST X(8) = U(V) ---> S3
		@NULL: ---> SX

	#Z^Shutdown: ---> S4

S3,	\State 3 counts active lever presses during the timeout
	\Med-PC levers can usually still be activated even when
	\retracted.
	#RZ(7): ADD A(7) ---> SX

	#Z^EndTimeout: ON ^LeftOut, ^Rightout; OFF Z(9) ---> S2
	#Z^Shutdown: ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Reward and cue delivery

S.S.5,
S1,	\State 1 waits for the start command
	#START: ---> S2

S2,	\State 2 waits for the ^Reward Z-Pulse
	#Z^Reward: OFF ^LeftOut, ^RightOut;
	ON Z(9), ^Tone; IF Z(10) = 1 [@PUMP, @PELLET]
		@PUMP: ON ^Pump ---> S3
		@PELLET: ON ^Pellet ---> S3

S3,	\State 3 waits to switch things off
	X(5)#T: IF X(6) <= 0 [@ALLOFF, @SOMEOFF]
		@ALLOFF: OFF ^Tone, ^Pump, ^Pellet;
		IF X(7) > 0 [@TIMEOUT, @ENDTIMEOUT]
			@TIMEOUT: ---> S5
			@ENDTIMEOUT: Z^EndTimeout ---> S2
		@SOMEOFF: IF Z(4) > Z(2) [@KEEPPUMP, @KEEPCUE]
			@KEEPPUMP: OFF ^Tone ---> S4
			@KEEPCUE: OFF ^Pump, ^Pellet ---> S4

S4,	\State 4 switches off anything else
	X(6)#T: OFF ^Tone, ^Pump, ^Pellet ---> S5

S5,	\State 5 waits to end the timeout
	X(7)#T: Z^EndTimeout ---> S2

S6,	\State 6 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 6 - Inactive Lever

S.S.6,
S1,	\State 1 waits for the start command
	#START: SHOW 3, Inactive Lever, A(3) ---> S2

S2,	\State 2 counts inactive lever presses
	#RZ(8): ADD A(3), K(T); SET S = X(10); SET C(S) = X(1); ADD X(10);
	SET S = X(10); SET C(S) = -987.987; SHOW 3, Inactive Lever, A(3) ---> SX

	#Z^Reward: ---> S3
	#Z^Shutdown: ---> S4

S3,	\State 3 counts inactive lever presses during the timeout
	\Med-PC levers can usually still be activated even when
	\retracted.
	#RZ(8): ADD A(8) ---> SX

	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Magazine Entries

S.S.7,
S1,	\State 1 waits for the start command
	#START: SHOW 5, Magazine Entries, A(5) ---> S2

S2,	\State 2 counts magazine entries
	#R^Magazine: ADD A(5), M(T); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 5, Magazine Entries, A(5) ---> SX

	#Z^Reward: ---> S3
	#Z^Shutdown: ---> S4

S3,	\State 3 counts magazine entries during the timeout
	#R^Magazine: ADD A(5), A(9), M(T); SET S = X(12); SET E(S) = X(1);
	ADD X(12); SET S = X(12); SET E(S) = -987.987;
	SHOW 5, Magazine Entries, A(5) ---> SX

	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Locomotor Activity

S.S.8,
S1,	\State 1 waits for the start command
	#START: SHOW 6, Locomotor Counts, A(6) ---> S2

S2,	\State 2 will count any locomotor beam break
	#R^ActivityOne: ADD A(6), A(15), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S3

	#R^ActivityTwo: ADD A(6), A(16), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S4

	#R^ActivityThree: ADD A(6), A(17), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S5

	#R^ActivityFour: ADD A(6), A(18), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S6

	#Z^Reward: ---> S7
	#Z^Shutdown: ---> S12

S3,	\State 3 will count any locomotor beam except ^ActivityOne
	#R^ActivityTwo: ADD A(6), A(16), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S4

	#R^ActivityThree: ADD A(6), A(17), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S5

	#R^ActivityFour: ADD A(6), A(18), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S6

	#Z^Reward: ---> S8
	#Z^Shutdown: ---> S12

S4,	\State 4 will count any locomotor beam except ^ActivityTwo
	#R^ActivityOne: ADD A(6), A(15), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S3

	#R^ActivityThree: ADD A(6), A(17), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S5

	#R^ActivityFour: ADD A(6), A(18), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S6

	#Z^Reward: ---> S9
	#Z^Shutdown: ---> S12

S5,	\State 5 will count any locomotor beam except ^ActivityThree
	#R^ActivityOne: ADD A(6), A(15), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S3

	#R^ActivityTwo: ADD A(6), A(16), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S4

	#R^ActivityFour: ADD A(6), A(18), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S6

	#Z^Reward: ---> S10
	#Z^Shutdown: ---> S12

S6,	\State 6 will count any locomotor beam except ^ActivityFour
	#R^ActivityOne: ADD A(6), A(15), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S3

	#R^ActivityTwo: ADD A(6), A(16), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S4

	#R^ActivityThree: ADD A(6), A(17), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S5

	#Z^Reward: ---> S11
	#Z^Shutdown: ---> S12

S7,	\State 7 will count any locomotor beam during the timeout
	#R^ActivityOne: ADD A(6), A(15), A(21), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S8

	#R^ActivityTwo: ADD A(6), A(16), A(22), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S9

	#R^ActivityThree: ADD A(6), A(17), A(23), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S10

	#R^ActivityFour: ADD A(6), A(18), A(24), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S11

	#Z^EndTimeout: ---> S2
	#Z^Shutdown: ---> S12

S8,	\State 8 will count any locomotor beam during the timeout except ^ActivityOne
	#R^ActivityTwo: ADD A(6), A(16), A(22), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S9

	#R^ActivityThree: ADD A(6), A(17), A(23), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S10

	#R^ActivityFour: ADD A(6), A(18), A(24), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S11

	#Z^EndTimeout: ---> S3
	#Z^Shutdown: ---> S12

S9,	\State 9 will count any locomotor beam during the timeout except ^ActivityTwo
	#R^ActivityOne: ADD A(6), A(15), A(21), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S8

	#R^ActivityThree: ADD A(6), A(17), A(23), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S10

	#R^ActivityFour: ADD A(6), A(18), A(24), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S11

	#Z^EndTimeout: ---> S4
	#Z^Shutdown: ---> S12

S10,	\State 10 will count any locomotor beam during the timeout except ^ActivityThree
	#R^ActivityOne: ADD A(6), A(15), A(21), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S8

	#R^ActivityTwo: ADD A(6), A(16), A(22), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S9

	#R^ActivityFour: ADD A(6), A(18), A(24), N(T), R(T); SET S = X(16);
	SET I(S) = X(1); ADD X(16); SET S = X(16); SET I(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S11

	#Z^EndTimeout: ---> S5
	#Z^Shutdown: ---> S12

S11,	\State 11 will count any locomotor beam except ^ActivityFour
	#R^ActivityOne: ADD A(6), A(15), A(21), N(T), O(T); SET S = X(13);
	SET F(S) = X(1); ADD X(13); SET S = X(13); SET F(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S8

	#R^ActivityTwo: ADD A(6), A(16), A(22), N(T), P(T); SET S = X(14);
	SET G(S) = X(1); ADD X(14); SET S = X(14); SET G(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S9

	#R^ActivityThree: ADD A(6), A(17), A(23), N(T), Q(T); SET S = X(15);
	SET H(S) = X(1); ADD X(15); SET S = X(15); SET H(S) = -987.987;
	SHOW 6, Locomotor Counts, A(6) ---> S10

	#Z^EndTimeout: ---> S6
	#Z^Shutdown: ---> S12

S12,	\State 12 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 9 - Pre-Session Screen Updater

S.S.9,
S1,	\State updates the screen before session start
	#START: CLEAR 6,9 ---> S2

	1": IF S.S.1 <= 2 [@SHOW, @SKIP]
	@SHOW: SHOW 1, Break Point Time (min), Z(0);
	SHOW 2, Max Session Length (min), Z(1);
	SHOW 3, Cue Length (s), Z(2);
	SHOW 4, Timeout (s), Z(3);
	SHOW 5, Pump Time (s), Z(4);
	SHOW 6, Maximum Rewards, Z(5);
	SHOW 7, Timebin Size (min), Z(6);
	SHOW 8, Active Lever (1L 3R), Z(7);
	SHOW 9, Inactive Lever (1L 3R), Z(8);
	IF Z(10) = 1 [@PUMP, @PELLET]
		@PUMP: SHOW 10, Reward via Pump, Z(10) ---> SX
		@PELLET: SHOW 10, Reward via Pellet, Z(10) ---> SX
	@SKIP: CLEAR 6,9 ---> S2

S2,	\State 2 is a holding state
	#START: ---> SX